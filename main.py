import logging
from telegram import Update

from storage.repository import SubscriberRepository
from telegram.ext import Updater, CallbackContext, MessageHandler, Filters
from config import Config
from telethon_client import telethon_tracker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥: ADMIN_IDS = {Config.ADMIN_IDS}")
logger.info(f"üîß TELEGRAM_TOKEN = {Config.TELEGRAM_TOKEN[:10]}...")
logger.info(f"üîß CHANNEL_ID = {Config.CHANNEL_ID}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
subscriber_repo = SubscriberRepository()


def handle_all_messages(update: Update, context: CallbackContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ –õ–°)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    if not update.message or not update.message.text:
        return

    message_text = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username or "–±–µ–∑ username"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥—ã
    if not message_text.startswith('/'):
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = message_text.split()
    command_full = parts[0][1:]  # –£–±–∏—Ä–∞–µ–º / –≤ –Ω–∞—á–∞–ª–µ
    command = command_full.split('@')[0]  # –£–±–∏—Ä–∞–µ–º @username –µ—Å–ª–∏ –µ—Å—Ç—å

    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ö–û–ú–ê–ù–î–´
    logger.info(f"üîç –ö–æ–º–∞–Ω–¥–∞ '{command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    logger.info(f"üîç –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: '{message_text}'")
    logger.info(f"üîç ADMIN_IDS: {Config.ADMIN_IDS}")
    logger.info(f"üîç user_id in ADMIN_IDS: {user_id in Config.ADMIN_IDS}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
    if user_id not in Config.ADMIN_IDS:
        logger.warning(f"üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù: {user_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
        try:
            update.message.delete()
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ {user_id} —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return

    # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–æ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in Config.ADMIN_IDS:
        try:
            update.message.delete()
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ {user_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞: {e}")

    # –õ–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    try:
        if command == 'start':
            response = "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n\n\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º/–≥—Ä—É–ø–ø–∞–º"

        elif command == 'stats':
            try:
                context.bot.send_message(
                    chat_id=user_id,
                    text="üîÑ –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."
                )
                channel_identifiers = Config.CHANNEL_ID
                data = {}
                for channel_identifier in channel_identifiers:
                    db_count = subscriber_repo.get_subscriber_count(channel_identifier)
                    data.update(
                            {
                                channel_identifier: db_count
                            }
                        )
                response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüîó Telethon –ø–æ–¥–∫–ª—é—á–µ–Ω: {telethon_tracker.is_connected}"
                if data:
                    for key, value in data.items():
                        response += "\n\n–ö–∞–Ω–∞–ª {channel}:\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {db_count}".format(
                            channel=key, db_count=value
                        )
            except Exception as e:
                response = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        else:
            response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –õ–ò–ß–ù–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è
        context.bot.send_message(
            chat_id=user_id,
            text=response
        )
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {command} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {command}: {e}"
        )


def remove_old_subscribers(context: CallbackContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 32 –¥–Ω—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        subscribers_to_remove = subscriber_repo.get_subscribers_to_remove()
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(subscribers_to_remove)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

        if not subscribers_to_remove:
            return

        for subscriber in subscribers_to_remove:
            user_id, username, first_name, last_name, channel_id = subscriber

            try:
                logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                # 1. –ë–ê–ù –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É (—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞)
                logger.info(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É...")
                from datetime import datetime, timedelta
                context.bot.ban_chat_member(
                    chat_id=channel_id,
                    user_id=user_id,
                    until_date=datetime.now() + timedelta(seconds=1)
                )
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω (—É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞)")

                # 2. –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê (—É–±–∏—Ä–∞–µ–º –∏–∑ –ß–°)
                logger.info(f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
                try:
                    context.bot.unban_chat_member(
                        chat_id=channel_id,
                        user_id=user_id,
                        only_if_banned=True
                    )
                    logger.info(f"üéâ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù –∏ —É–±—Ä–∞–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!")
                except Exception as unban_error:
                    logger.error(f"‚ùå –û–®–ò–ë–ö–ê –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò {user_id}: {unban_error}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

                # 3. –û—Ç–º–µ—á–∞–µ–º –≤ –ë–î
                subscriber_repo.mark_as_removed(user_id, channel_id)
                logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤ –ë–î")

                logger.info(f"üéØ –ó–ê–í–ï–†–®–ï–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

            except Exception as e:
                logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è {user_id}: {e}")
                # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
                try:
                    subscriber_repo.mark_as_removed(user_id, channel_id)
                    logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É")
                except Exception as db_error:
                    logger.error(f"üóÑÔ∏è –û—à–∏–±–∫–∞ –ë–î –¥–ª—è {user_id}: {db_error}")

    except Exception as e:
        logger.error(f"üí• –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê –≤ –∑–∞–¥–∞—á–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


def setup_application():
    # üéØ –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö TELETHON –¢–†–ï–ö–ï–†–ê
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ Telethon —Ç—Ä–µ–∫–µ—Ä–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞...")
    telethon_success = telethon_tracker.start_sync()

    if telethon_success:
        logger.info("‚úÖ Telethon —Ç—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    else:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telethon —Ç—Ä–µ–∫–µ—Ä!")
        # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º

    # üéØ Bot API –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    updater = Updater(Config.TELEGRAM_TOKEN, use_context=True)
    application = updater.dispatcher

    # üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Bot API (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫ Telethon)
    application.add_handler(MessageHandler(Filters.all, handle_all_messages))

    # ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    job_queue = updater.job_queue
    if job_queue:
        job_queue.run_repeating(remove_old_subscribers, interval=300, first=10)

        # üîÑ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø TELETHON (–∫–∞–∂–¥—ã–π —á–∞—Å)
        job_queue.run_repeating(sync_telethon_periodically, interval=600, first=30)

        logger.info("‚úÖ JobQueue –∑–∞–ø—É—â–µ–Ω —Å Telethon —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π")

    return updater


def sync_telethon_periodically(context: CallbackContext):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telethon"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Telethon...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        result = telethon_tracker.force_sync_members_sync_simple()
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
