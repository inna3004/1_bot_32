import logging
from datetime import datetime, timedelta
from storage.postgres_storage import get_connection
from config import Config
logger = logging.getLogger(__name__)


class SubscriberRepository:
    def __init__(self):
        pass

    def add_or_renew_subscriber(self, user_data, renewal_type="new"):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        """
        try:
            conn = get_connection()
            cursor = conn.cursor()

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('SELECT id, removed FROM subscribers WHERE user_id = %s', (user_data['user_id'],))
            existing = cursor.fetchone()

            if existing:
                # üîÑ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –û–ë–ù–û–í–õ–Ø–ï–ú
                cursor.execute('''
                    UPDATE subscribers 
                    SET username = %s, first_name = %s, last_name = %s,
                        removed = FALSE, removal_date = NULL,
                        join_date = CURRENT_TIMESTAMP
                    WHERE user_id = %s
                ''', (
                    user_data.get('username'),
                    user_data.get('first_name'),
                    user_data.get('last_name'),
                    user_data['user_id']
                ))
                action = "–æ–±–Ω–æ–≤–ª–µ–Ω"
            else:
                # ‚ú® –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –°–û–ó–î–ê–ï–ú
                cursor.execute('''
                    INSERT INTO subscribers (
                        user_id, username, first_name, last_name, channel_id, 
                        added_by_admin, manually_added
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                ''', (
                    user_data['user_id'],
                    user_data.get('username'),
                    user_data.get('first_name'),
                    user_data.get('last_name'),
                    user_data.get('channel_id'),
                    user_data.get('added_by_admin', False),
                    user_data.get('manually_added', False)
                ))
                action = "–¥–æ–±–∞–≤–ª–µ–Ω"

            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['user_id']} {action} (—Ç–∏–ø: {renewal_type})")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}: {e}")
            return False

    def add_subscriber_from_telethon(self, user_data):
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ Telethon
        """
        try:
            conn = get_connection()
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('SELECT id, removed, join_date FROM subscribers WHERE user_id = %s', (user_data['user_id'],))
            existing = cursor.fetchone()

            if existing:
                id, removed, old_join_date = existing

                if removed:
                    # üîÑ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ë–´–õ –£–î–ê–õ–ï–ù - –æ–±–Ω–æ–≤–ª—è–µ–º join_date (–Ω–æ–≤–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ)
                    logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω, —Å—Ç–∞—Ä–∞—è join_date: {old_join_date}")

                    cursor.execute('''
                        UPDATE subscribers 
                        SET username = %s, first_name = %s, last_name = %s,
                            removed = FALSE, 
                            removal_date = NULL,
                            join_date = CURRENT_TIMESTAMP,  -- ‚ö†Ô∏è –û–ë–ù–û–í–õ–Ø–ï–ú –î–ê–¢–£ –¢–û–õ–¨–ö–û –ï–°–õ–ò –ë–´–õ –£–î–ê–õ–ï–ù
                            last_join_date = CURRENT_TIMESTAMP
                        WHERE user_id = %s
                        RETURNING join_date
                    ''', (
                        user_data.get('username'),
                        user_data.get('first_name'),
                        user_data.get('last_name'),
                        user_data['user_id']
                    ))

                    new_join_date = cursor.fetchone()[0]
                    logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–æ–≤–∞—è join_date –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {new_join_date}")
                    action = "–æ–±–Ω–æ–≤–ª–µ–Ω (—Å–Ω—è—Ç–∞ –ø–æ–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞)"
                else:
                    # üîÑ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ê–ö–¢–ò–í–ï–ù - –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º join_date (–ø—Ä–æ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
                    logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º join_date: {old_join_date}")

                    cursor.execute('''
                        UPDATE subscribers 
                        SET username = %s, first_name = %s, last_name = %s,
                            last_join_date = CURRENT_TIMESTAMP
                        WHERE user_id = %s
                    ''', (
                        user_data.get('username'),
                        user_data.get('first_name'),
                        user_data.get('last_name'),
                        user_data['user_id']
                    ))
                    action = "–æ–±–Ω–æ–≤–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"

            else:
                # ‚ú® –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –°–û–ó–î–ê–ï–ú
                cursor.execute('''
                    INSERT INTO subscribers (
                        user_id, username, first_name, last_name, channel_id,
                        added_by_admin, manually_added, detection_source
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ''', (
                    user_data['user_id'],
                    user_data.get('username'),
                    user_data.get('first_name'),
                    user_data.get('last_name'),
                    user_data.get('channel_id'),
                    user_data.get('added_by_admin', False),
                    user_data.get('manually_added', False),
                    user_data.get('detection_source', 'telethon')
                ))
                action = "–¥–æ–±–∞–≤–ª–µ–Ω"

            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['user_id']} {action} —á–µ—Ä–µ–∑ Telethon")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telethon: {e}")
            return False


    def add_subscriber(self, user_data):
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO subscribers (user_id, username, first_name, last_name, channel_id, added_by_admin, manually_added)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (user_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                removed = FALSE,
                removal_date = NULL,
                added_by_admin = EXCLUDED.added_by_admin,
                manually_added = EXCLUDED.manually_added,
                removal_count = 0,
                join_date = CURRENT_TIMESTAMP
            ''', (
                user_data['user_id'],
                user_data.get('username'),
                user_data.get('first_name'),
                user_data.get('last_name'),
                user_data.get('channel_id'),
                user_data.get('added_by_admin', True),
                user_data.get('manually_added', True)
            ))
            conn.commit()
            conn.close()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_data['user_id']}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
            return False

    def mark_as_removed(self, user_id):
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE subscribers 
                SET removed = TRUE, removal_date = CURRENT_TIMESTAMP,
                removal_count = removal_count + 1 
                WHERE user_id = %s
            ''', (user_id,))
            conn.commit()
            conn.close()
            logger.info(f"–û—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π: {user_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏: {e}")
            return False

    def get_subscriber_count(self):
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM subscribers WHERE removed = FALSE')
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞: {e}")
            return 0

    def get_subscribers_to_remove(self):
        try:
            conn = get_connection()
            cursor = conn.cursor()

            # üîß –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –≤–º–µ—Å—Ç–æ 32 –¥–Ω–µ–π
            minutes_to_remove = 43200  # ‚Üê –¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - :1 –º–∏–Ω—É—Ç–∞ 46080
            removal_date = datetime.now() - timedelta(minutes=minutes_to_remove)

            # –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ó–ê–ü–†–û–° –î–õ–Ø –û–¢–õ–ê–î–ö–ò
            cursor.execute('''
                SELECT user_id, username, join_date, removed 
                FROM subscribers 
                WHERE user_id = 5451598505
            ''')

            debug_info = cursor.fetchone()
            if debug_info:
                user_id, username, join_date, removed = debug_info
                logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - join_date: {join_date}, removed: {removed}")

            cursor.execute('''
                SELECT user_id, username, first_name, last_name 
                FROM subscribers 
                WHERE join_date < %s 
                AND removed = FALSE 
                AND user_id NOT IN %s
            ''', (removal_date, tuple(Config.ADMIN_IDS)))

            result = cursor.fetchall()
            conn.close()

            logger.info(f"‚è∞ –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å—Ç–∞—Ä—à–µ {minutes_to_remove} –º–∏–Ω—É—Ç")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {e}")
            return []

    def get_user_info(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT username, first_name, last_name, join_date, removed, removal_count 
                FROM subscribers WHERE user_id = %s
            ''', (user_id,))

            result = cursor.fetchone()
            conn.close()
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return None

    def get_active_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, username, first_name, last_name, join_date 
                FROM subscribers 
                WHERE removed = FALSE 
                ORDER BY join_date DESC
            ''')

            result = cursor.fetchall()
            conn.close()
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []


class InviteRepository:
    def __init__(self):
        pass

    def save_invite_link(self, user_id: int, invite_link: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É"""
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO invite_links (user_id, invite_link)
                VALUES (%s, %s)
            ''', (user_id, invite_link))
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞: {e}")
            return False

    def save_general_invite(self, invite_link: str, admin_id: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â—É—é –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É"""
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO invite_links (user_id, invite_link, is_general, created_by)
                VALUES (%s, %s, %s, %s)
            ''', (0, invite_link, True, admin_id))
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ–±—â–∞—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–æ–º {admin_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–π –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏: {e}")
            return False

    def get_active_invites(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏"""
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, invite_link, created_at, used, is_general
                FROM invite_links 
                WHERE expired = FALSE 
                ORDER BY created_at DESC
            ''')
            result = cursor.fetchall()
            conn.close()
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤: {e}")
            return []

    def get_used_invites(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤"""
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT invite_link, used_by, used_at, is_general
                FROM invite_links 
                WHERE used = TRUE 
                ORDER BY used_at DESC
                LIMIT 10
            ''')

            result = cursor.fetchall()
            conn.close()
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {e}")
            return []

    def mark_invite_used(self, invite_link: str, used_by: int):
        """–ü–æ–º–µ—Ç–∏—Ç—å –∏–Ω–≤–∞–π—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
        try:
            conn = get_connection()
            cursor = conn.cursor()

            # –ò—â–µ–º –∏–Ω–≤–∞–π—Ç –ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º—É
            cursor.execute('''
                UPDATE invite_links 
                SET used = TRUE, used_by = %s, used_at = CURRENT_TIMESTAMP,
                    expired = TRUE
                WHERE invite_link = %s
            ''', (used_by, invite_link))

            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {used_by}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞: {e}")
            return False