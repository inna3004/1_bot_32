import logging
import asyncio
from telethon import TelegramClient, events
from telethon.sessions import MemorySession
from telethon.tl.types import Channel, Chat
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch
from config import Config
from storage.repository import SubscriberRepository

logger = logging.getLogger(__name__)


class TelethonTracker:
    def __init__(self):
        self.client = None
        self.is_connected = False
        self.is_monitoring = False
        self.subscriber_repo = SubscriberRepository()

    def start_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telethon –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
            self.client = TelegramClient(
                MemorySession(),
                Config.TELEGRAM_API_ID,
                Config.TELEGRAM_API_HASH,
                receive_updates=True,
                sequential_updates=False,
                connection_retries=10,
                retry_delay=3,
                auto_reconnect=True,
                flood_sleep_threshold=60,
                device_model='Bot Server',
                system_version='1.0',
                app_version='1.0'
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            thread = threading.Thread(target=self._run_async)
            thread.daemon = True
            thread.start()

            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
            return False

    def _run_async(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(self._start())

    async def _start(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ö–ê–ö –ë–û–¢"""
        try:
            # –Ø–í–ù–û —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –±–æ—Ç —Å –ø–æ–º–æ—â—å—é bot_token
            await self.client.start(bot_token=Config.TELEGRAM_TOKEN)
            self.is_connected = True
            logger.info("‚úÖ Telethon –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –ë–û–¢")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            await self._validate_channel()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await self._setup_handlers()
            await self.force_sync_members()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telethon: {e}")

    async def _validate_channel(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ID
            channel_identifiers = [
                int(Config.CHANNEL_ID),  # –∫–∞–∫ —á–∏—Å–ª–æ: -1002908805172
                int(str(Config.CHANNEL_ID).replace('-100', '')),  # –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞: 2908805172
            ]

            entity = None
            for identifier in channel_identifiers:
                try:
                    entity = await self.client.get_entity(identifier)
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —Å ID: {identifier}")
                    break
                except Exception as e:
                    logger.debug(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å ID {identifier}: {e}")
                    continue

            if entity:
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª: {getattr(entity, 'title', 'Unknown')} (ID: {entity.id})")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {Config.CHANNEL_ID}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
            return False

    async def force_sync_members(self, safe_mode=False):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if safe_mode:
            return await self.force_sync_members_safe()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
            try:
                logger.info("üîÅ –ó–∞–ø—É—Å–∫ –ë–´–°–¢–†–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

                channel_id = int(Config.CHANNEL_ID)
                entity = await self.client.get_entity(channel_id)
                participants = await self.client.get_participants(entity)

                added_count = 0
                for user in participants:
                    if user.bot:
                        continue

                    user_data = {
                        'user_id': user.id,
                        'username': user.username,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'channel_id': Config.CHANNEL_ID,
                        'added_by_admin': False,
                        'manually_added': False,
                        'detection_source': 'telethon_fast_sync'
                    }

                    if self.subscriber_repo.add_subscriber_from_telethon(user_data):
                        added_count += 1

                logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

            except Exception as e:
                # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ —É–ø–∞–ª, –ø—Ä–æ–±—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
                logger.warning(f"‚ö†Ô∏è –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ø–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é: {e}")
                return await self.force_sync_members_safe()

    async def get_all_participants_safe(self, entity):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–∞—É–∑–∞–º–∏ (–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞)"""
        try:
            all_participants = []
            offset = 0
            limit = 100

            while True:
                participants = await self.client(GetParticipantsRequest(
                    channel=entity,
                    filter=ChannelParticipantsSearch(''),
                    offset=offset,
                    limit=limit,
                    hash=0
                ))

                if not participants.users:
                    break

                all_participants.extend(participants.users)
                offset += len(participants.users)
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants.users)}")

                # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤
                await asyncio.sleep(1)

            logger.info(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_participants)}")
            return all_participants

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []

    async def force_sync_members_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ª–∏–º–∏—Ç–æ–≤"""
        try:
            logger.info("üîÅ –ó–∞–ø—É—Å–∫ –ë–ï–ó–û–ü–ê–°–ù–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            channel_id = int(Config.CHANNEL_ID)
            entity = await self.client.get_entity(channel_id)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            participants = await self.get_all_participants_safe(entity)

            added_count = 0
            for user in participants:
                if user.bot:
                    continue

                user_data = {
                    'user_id': user.id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'channel_id': Config.CHANNEL_ID,
                    'added_by_admin': False,
                    'manually_added': False,
                    'detection_source': 'telethon_safe_sync'
                }

                if self.subscriber_repo.add_subscriber_from_telethon(user_data):
                    added_count += 1

            logger.info(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"
            logger.error(error_msg)
            return error_msg

    def force_sync_members_sync_simple(self):
        """–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ event loops)"""
        try:
            import asyncio
            from telethon import TelegramClient
            from telethon.sessions import MemorySession

            async def sync_task():
                temp_client = TelegramClient(
                    MemorySession(),
                    Config.TELEGRAM_API_ID,
                    Config.TELEGRAM_API_HASH,
                    connection_retries=5,
                    retry_delay=2,
                    flood_sleep_threshold=60
                )

                try:
                    await temp_client.start(bot_token=Config.TELEGRAM_TOKEN)

                    channel_id = int(Config.CHANNEL_ID)
                    entity = await temp_client.get_entity(channel_id)
                    participants = await temp_client.get_participants(entity)

                    added_count = 0
                    for user in participants:
                        if user.bot:
                            continue
                        user_data = {
                            'user_id': user.id,
                            'username': user.username,
                            'first_name': user.first_name,
                            'last_name': user.last_name,
                            'channel_id': Config.CHANNEL_ID,
                            'added_by_admin': False,
                            'manually_added': False,
                            'detection_source': 'telethon_periodic_sync'
                        }
                        if self.subscriber_repo.add_subscriber_from_telethon(user_data):
                            added_count += 1

                    return f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                finally:
                    await temp_client.disconnect()

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(sync_task())
            loop.close()
            return result

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"

    def force_sync_members_sync(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return self.force_sync_members_sync_simple()

    async def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""

        @self.client.on(events.ChatAction)
        async def handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –≤—ã—Ö–æ–¥–æ–≤"""
            try:
                channel_id = int(Config.CHANNEL_ID)
                if event.chat_id != channel_id:
                    return

                # –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
                if event.user_joined:
                    user = await event.get_user()
                    await self._handle_new_member(user)

                # –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª
                elif event.user_left:
                    user = await event.get_user()
                    await self._handle_left_member(user)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

        self.is_monitoring = True
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telethon –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def _handle_new_member(self, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            if user.bot:
                return

            user_data = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'channel_id': Config.CHANNEL_ID,
                'added_by_admin': False,
                'manually_added': False,
                'detection_source': 'telethon'
            }

            if self.subscriber_repo.add_subscriber_from_telethon(user_data):
                logger.info(f"‚úÖ Telethon: –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}")
            else:
                logger.error(f"‚ùå Telethon: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id}: {e}")

    async def _handle_left_member(self, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—à–µ–¥—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        try:
            if user.bot:
                return

            if self.subscriber_repo.mark_as_removed(user.id):
                logger.info(f"‚úÖ Telethon: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π")
            else:
                logger.error(f"‚ùå Telethon: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ–¥—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user.id}: {e}")

    def get_member_count_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(self._get_member_count())
            loop.close()
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return 0

    async def _get_member_count(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            channel_id = int(Config.CHANNEL_ID)
            entity = await self.client.get_entity(channel_id)
            participants = await self.client.get_participants(entity)
            return len([p for p in participants if not p.bot])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return 0

    def is_connected(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self.is_connected


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telethon_tracker = TelethonTracker()