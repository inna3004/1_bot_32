import logging
import asyncio
from telethon import TelegramClient
from telethon.sessions import MemorySession
from telethon.tl.functions.channels import GetParticipantsRequest
from telethon.tl.types import ChannelParticipantsSearch
from config import Config
from storage.repository import SubscriberRepository

logger = logging.getLogger(__name__)


class TelethonTracker:
    def __init__(self):
        self.client = None
        self.is_connected = False
        self.subscriber_repo = SubscriberRepository()

    def start_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telethon –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            self.client = TelegramClient(
                MemorySession(),
                api_id=Config.TELEGRAM_API_ID,
                api_hash=Config.TELEGRAM_API_HASH,
                receive_updates=True,
                sequential_updates=False,
                connection_retries=10,
                retry_delay=3,
                auto_reconnect=True,
                flood_sleep_threshold=60,
                device_model='Bot Server',
                system_version='1.0',
                app_version='1.0'
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            thread = threading.Thread(target=self._run_async)
            thread.daemon = True
            thread.start()

            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
            return False

    def _run_async(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(self._start())

    async def _start(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ö–ê–ö –ë–û–¢"""
        try:
            # –Ø–í–ù–û —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –±–æ—Ç —Å –ø–æ–º–æ—â—å—é bot_token
            await self.client.start(bot_token=Config.TELEGRAM_TOKEN)
            self.is_connected = True
            logger.info("‚úÖ Telethon –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –ë–û–¢")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.force_sync_members()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telethon: {e}")

    async def force_sync_members(self, safe_mode=False):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if safe_mode:
            return await self.force_sync_members_safe()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
            try:
                logger.info("üîÅ –ó–∞–ø—É—Å–∫ –ë–´–°–¢–†–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
                added_count = 0
                channel_identifiers = Config.CHANNEL_ID

                for channel_id in channel_identifiers:
                    try:
                        entity = await self.client.get_entity(channel_id)
                        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —Å ID: {channel_id}")
                    except Exception as e:
                        logger.debug(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å ID {channel_id}: {e}")
                        continue

                    participants = await self.client.get_participants(entity)
                    for user in participants:
                        if user.bot:
                            continue

                        user_data = {
                            'user_id': user.id,
                            'username': user.username,
                            'first_name': user.first_name,
                            'last_name': user.last_name,
                            'channel_id': channel_id,
                            'added_by_admin': False,
                            'manually_added': False,
                            'detection_source': 'telethon_fast_sync',
                        }

                        if self.subscriber_repo.add_subscriber_from_telethon(user_data):
                            added_count += 1

                logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

            except Exception as e:
                # –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ —É–ø–∞–ª, –ø—Ä–æ–±—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
                logger.warning(f"‚ö†Ô∏è –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–ø–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é: {e}")
                return await self.force_sync_members_safe()

    async def get_all_participants_safe(self, entity):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–∞—É–∑–∞–º–∏ (–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞)"""
        try:
            all_participants = []
            offset = 0
            limit = 100

            while True:
                participants = await self.client(GetParticipantsRequest(
                    channel=entity,
                    filter=ChannelParticipantsSearch(''),
                    offset=offset,
                    limit=limit,
                    hash=0
                ))

                if not participants.users:
                    break

                all_participants.extend(participants.users)
                offset += len(participants.users)
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants.users)}")

                # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤
                await asyncio.sleep(1)

            logger.info(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(all_participants)}")
            return all_participants

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []

    async def force_sync_members_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ª–∏–º–∏—Ç–æ–≤"""
        try:
            logger.info("üîÅ –ó–∞–ø—É—Å–∫ –ë–ï–ó–û–ü–ê–°–ù–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
            added_count = 0
            channel_identifiers = Config.CHANNEL_ID

            for channel_id in channel_identifiers:
                try:
                    entity = await self.client.get_entity(channel_id)
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —Å ID: {channel_id}")
                except Exception as e:
                    logger.debug(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å ID {channel_id}: {e}")
                    continue

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
                participants = await self.get_all_participants_safe(entity)

                for user in participants:
                    if user.bot:
                        continue

                    user_data = {
                        'user_id': user.id,
                        'username': user.username,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'channel_id': channel_id,
                        'added_by_admin': False,
                        'manually_added': False,
                        'detection_source': 'telethon_safe_sync'
                    }

                    if self.subscriber_repo.add_subscriber_from_telethon(user_data):
                        added_count += 1

            logger.info(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    def force_sync_members_sync_simple(self):
        """–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ event loops)"""
        try:
            async def sync_task():
                temp_client = TelegramClient(
                    MemorySession(),
                    Config.TELEGRAM_API_ID,
                    Config.TELEGRAM_API_HASH,
                    connection_retries=5,
                    retry_delay=2,
                    flood_sleep_threshold=60
                )

                try:
                    await temp_client.start(bot_token=Config.TELEGRAM_TOKEN)
                    added_count = 0
                    channel_identifiers = Config.CHANNEL_ID

                    for channel_id in channel_identifiers:
                        try:
                            entity = await self.client.get_entity(channel_id)
                            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —Å ID: {channel_id}")
                        except Exception as e:
                            logger.debug(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å ID {channel_id}: {e}")
                            continue

                        participants = await temp_client.get_participants(entity)

                        for user in participants:
                            if user.bot:
                                continue

                            user_data = {
                                'user_id': user.id,
                                'username': user.username,
                                'first_name': user.first_name,
                                'last_name': user.last_name,
                                'channel_id': channel_id,
                                'added_by_admin': False,
                                'manually_added': False,
                                'detection_source': 'telethon_periodic_sync'
                            }
                            if self.subscriber_repo.add_subscriber_from_telethon(user_data):
                                added_count += 1

                    return f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {added_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                finally:
                    await temp_client.disconnect()

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(sync_task())
            loop.close()
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

    def get_member_count_sync(self, channel_id):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            async def sync_task(channel_id):
                temp_client = TelegramClient(
                    MemorySession(),
                    Config.TELEGRAM_API_ID,
                    Config.TELEGRAM_API_HASH,
                    connection_retries=5,
                    retry_delay=2,
                    flood_sleep_threshold=60
                )

                try:
                    await temp_client.start(bot_token=Config.TELEGRAM_TOKEN)
                    try:
                        entity = await self.client.get_entity(channel_id)
                        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —Å ID: {channel_id}")
                    except Exception as e:
                        logger.debug(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å ID {channel_id}: {e}")
                        return False

                    participants = await self.client.get_participants(entity)
                    return len([p for p in participants if not p.bot])
                finally:
                    await temp_client.disconnect()

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            result = loop.run_until_complete(sync_task(channel_id))
            loop.close()
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telethon_tracker = TelethonTracker()
